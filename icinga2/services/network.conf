#
# Network related checks (FFHO-built)
#


#
# ifupdown2
apply Service "ifupdown2" {
        import "generic-service"

	check_command = "ifupdown2"

	assign where host.address && host.vars.os == "Linux"
}


#
# bird process
apply Service "bird" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_command = "bird"
	vars.procs_critical = "1:"
	vars.procs_warning = ":1"
	check_interval = 5m
	max_check_attempts = 3
	retry_interval = 3m

	assign where host.address && host.vars.os == "Linux" && "router" in host.vars.roles
}

apply Service "bird6" {
	import "generic-service"

	check_command = "procs"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	vars.procs_command = "bird6"
	vars.procs_critical = "1:"
	vars.procs_warning = ":1"
	check_interval = 5m
	max_check_attempts = 3
	retry_interval = 3m

	assign where host.address && host.vars.os == "Linux" && "router" in host.vars.roles
}


#
# bird OSPF
apply Service "bird_ospf" {
	import "generic-service"

	check_command = "bird_ospf"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	assign where host.address && host.vars.os == "Linux" && "router" in host.vars.roles
}

apply Service "bird_ospf6" {
	import "generic-service"

	check_command = "bird_ospf"
	vars.ipv6 = true

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	assign where host.address && host.vars.os == "Linux" && "router" in host.vars.roles
}


#
# bird iBGP
apply Service "bird_ibgp" {
	import "generic-service"

	check_command = "bird_ibgp"

	if (host.name != NodeName) {
		command_endpoint = host.name
	}

	assign where host.address && host.vars.os == "Linux" && "router" in host.vars.roles
}

